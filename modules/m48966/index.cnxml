<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Json0130: JSON and JavaScript</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m48966</md:content-id>
  <md:title>Json0130: JSON and JavaScript</md:title>
  <md:abstract>Learn how to transform a JavaScript object into a JSON string and how to transform the JSON string back into a JavaScript object.</md:abstract>
  <md:uuid>3432a6de-ed5b-49df-b6f5-f4717f6f2faa</md:uuid>
</metadata>

<content>


















<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

	

<item id="li1000">
<link id="a1000" target-id="Preface">

Preface

</link>


	

<list id="ul1001" list-type="bulleted">

		

<item id="li1001">
<link id="a1001" target-id="Viewing_tip">

Viewing tip

</link>


<list id="ul1002" list-type="bulleted">

			

<item id="li1002">
<link id="a1002" target-id="Figures">

Figures

</link>


</item>


			

<item id="li1003">
<link id="a1003" target-id="Listings">

Listings

</link>


</item>


		

</list>


		

</item>


	

</list>


	

</item>


	

<item id="li1004">
<link id="a1004" target-id="Preview">

Preview

</link>

 

</item>


	

<item id="li1005">
<link id="a1005" target-id="General_background_information">

General background information

</link>


</item>


	

<item id="li1006">
<link id="a1006" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>


<list id="ul1003" list-type="bulleted">

		

<item id="li1007">
<link id="a1007" target-id="Json0130a">

Json0130a.htm

</link>


</item>



		

<item id="li1008">
<link id="a1008" target-id="Json0130b">

Json0130b.htm

</link>


</item>


		

<item id="li1009">
<link id="a1009" target-id="A_word_of_caution">

A word of caution

</link>


</item>


		

<item id="li1010">
<link id="a1010" target-id="Recognizing_the_difference">

Recognizing the difference

</link>


</item>


	

</list>


	

</item>



	

<item id="li1011">
<link id="a1011" target-id="Run_the_program">

Run the scripts

</link>


</item>


	

<item id="li1012">
<link id="a1012" target-id="Debugging_JavaScript">

Debugging JavaScript

</link>


</item>




	

<item id="li1013">
<link id="a1013" target-id="Miscellaneous">

Miscellaneous

</link>


</item>


	

<item id="li1014">
<link id="a1014" target-id="Complete_program_listing">

Complete script listings

</link>


</item>




</list>


	
	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1000">
This module is one in a collection of modules designed for teaching 
	

<emphasis id="strong1000" effect="bold">
ITSE 1356 Introduction to XML

</emphasis>
 at Austin 
	Community College in Austin, TX.

</para>




<para id="p1001">
As mentioned in an earlier module, because JSON is an emerging alternative to 
XML, beginning in the Fall of 2014, the course will include an introductory 
section on JSON. The modules in this collection and the online resources pointed 
to by these modules will be the primary learning resource for the JSON portion 
of the course.

</para>


	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1002">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>


	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1004" list-type="bulleted">

		

<item id="li1015">
<link id="a1015" target-id="Figure_1">

Figure 1

</link>

. Screen output from Json0130a.htm.

</item>


		

<item id="li1016">
<link id="a1016" target-id="Figure_2">

Figure 2

</link>

. Partial screen output from Json0130a.htm.

</item>


		

<item id="li1017">
<link id="a1017" target-id="Figure_3">

Figure 3

</link>

. Partial screen output from Json0130a.htm.

</item>



		

<item id="li1018">
<link id="a1018" target-id="Figure_4">

Figure 4

</link>

. Screen output from Json0130b,htm.

</item>


		

<item id="li1019">
<link id="a1019" target-id="Figure_5">

Figure 5

</link>

. Possible terminology issue. 

</item>


		

<item id="li1020">
<link id="a1020" target-id="Figure_6">

Figure 6

</link>

. Output from the script.

</item>


		

<item id="li1021">
<link id="a1021" target-id="Figure_7">

Figure 7

</link>

. Output from the script.

</item>



	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1005" list-type="bulleted">

		

<item id="li1022">
<link id="a1022" target-id="Listing_1">

Listing 1

</link>

. Define a JavaScript function. 

</item>


		

<item id="li1023">
<link id="a1023" target-id="Listing_2">

Listing 2

</link>

. Create a JavaScript object. 

</item>


		

<item id="li1024">
<link id="a1024" target-id="Listing_3">

Listing 3

</link>

. Garbage out. 

</item>


		

<item id="li1025">
<link id="a1025" target-id="Listing_4">

Listing 4

</link>

. Display keys in object. 

</item>


		

<item id="li1026">
<link id="a1026" target-id="Listing_5">

Listing 5

</link>

. Display object's values.

</item>


		

<item id="li1027">
<link id="a1027" target-id="Listing_6">

Listing 6

</link>

. Transform JavaScript object into a JSON string.

</item>


		

<item id="li1028">
<link id="a1028" target-id="Listing_7">

Listing 7

</link>

. Unsuccessful attempt to access name and age.

</item>


		

<item id="li1029">
<link id="a1029" target-id="Listing_8">

Listing 8

</link>

. Transform the JSON string into a JavaScript object.

</item>


		

<item id="li1030">
<link id="a1030" target-id="Listing_9">

Listing 9

</link>

. Display keys in object.

</item>



		

<item id="li1031">
<link id="a1031" target-id="Listing_10">

Listing 10

</link>

. Create a JavaScript object.

</item>


		

<item id="li1032">
<link id="a1032" target-id="Listing_11">

Listing 11

</link>

. Transform the object into a JSON string.

</item>


		

<item id="li1033">
<link id="a1033" target-id="Listing_12">

Listing 12

</link>

. Transform the JSON string into a JavaScript object.

</item>


		

<item id="li1034">
<link id="a1034" target-id="Listing_13">

Listing 13

</link>

. Possible terminology issue.

</item>


		

<item id="li1035">
<link id="a1035" target-id="Listing_14">

Listing 14

</link>

. Comparison of object and 
		string.

</item>


		

<item id="li1036">
<link id="a1036" target-id="Listing_15">

Listing 15

</link>

. Transform them both.

</item>


		

<item id="li1037">
<link id="a1037" target-id="Listing_16">

Listing 16

</link>

. Json0130a.htm.

</item>


		

<item id="li1038">
<link id="a1038" target-id="Listing_17">

Listing 17

</link>

. Json0130b.htm.

</item>


		

<item id="li1039">
<link id="a1039" target-id="Listing_18">

Listing 18

</link>

. Json0130d.htm

</item>


	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>


	

<para id="p1003">
I will present and explain three JavaScript scripts in this module. Each 
	script shows how to transform a JavaScript object into a JSON string and 
	how to transform the JSON string back into a JavaScript object.

</para>




<para id="p1004">
The first script deals with a very simple JavaScript object. The second 
script deals with a slightly more complex JavaScript object that encapsulates 
an array of JavaScript objects.

</para>




<para id="p1005">
The third script illustrates how to tell the difference between a JavaScript 
object in 

<emphasis id="em1000" effect="italics">
object literal

</emphasis>
 format and a JSON string.

</para>




<para id="p1006">
In addition to the three scripts described above, I will provide a word of 
caution regarding a possible terminology issue on a major technical website 
using a script from that website as an example of the issue.

</para>


	

</section>
<section id="h11003">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1007">
<emphasis id="strong1001" effect="bold">
Prerequisite knowledge

</emphasis>
</para>




<para id="p1008">
In order to understand the material in this module, you will need a moderate 
understanding of HTML and JavaScript programming.

</para>




<para id="p1009">
As you learned in an earlier module, several different programming languages 
including JavaScript, Java, and PHP support JSON. I elected to use JavaScript 
in these modules because many of the students enrolled in this course are also enrolled in the web 
development curriculum at Austin Community College. Those students either 
already have, 
or shortly will have a requirement to learn HTML and JavaScript programming for 
their other coursework.

</para>




<para id="p1010">
If you already know HTML and you know how to program using JavaScript, you should continue with 
this module. If not, you need to take a side trip and learn how to program in 
JavaScript before continuing. Also, if you don't know HTML, you should 
learn that also.

</para>




<para id="p1011">
There are hundreds of online tutorials available for learning HTML and 
JavaScript, some better than others. For HTML, I recommend the free online 

<emphasis id="em1001" effect="italics">
Introduction to HTML

</emphasis>
 tutorial at


<link id="a1040" url="http://www.codecademy.com/tracks/web">


http://www.codecademy.com/tracks/web

</link>

. For JavaScript, I 
recommend the free 

<emphasis id="em1002" effect="italics">
JavaScript

</emphasis>
 
tutorial at 

<link id="a1041" url="http://www.codecademy.com/tracks/javascript">


http://www.codecademy.com/tracks/javascript

</link>

 An average college student 
should be able to complete either tutorial in about fifteen hours or less. Once 
you complete either or both tutorials, your knowledge of HTML and JavaScript should be sufficient 
for an understanding of JSON.

</para>




<para id="p1012">
<emphasis id="strong1002" effect="bold">
Differences between a JSON string and a JavaScript object

</emphasis>
</para>




<para id="p1013">

The syntax of a JSON string looks a lot like the syntax of a JavaScript object 
in 

<emphasis id="strong1003" effect="bold">
<emphasis id="em1003" effect="italics">
object literal notation

</emphasis>
</emphasis>
. 

</para>




<quote id="blockquote1000" display="block">

Compare the JSON string in the second line in 

<link id="a1042" target-id="Figure_2">

Figure 2

</link>

 
with the object literal in the second line in 

<link id="a1043" target-id="Listing_2">

Listing 2

</link>

.

</quote>




<para id="p1014">

This can be confusing to those who don't recognize the difference 
between the two. I will explain some of the differences in this module.

</para>




<para id="p1015">



<emphasis id="strong1004" effect="bold">
A JavaScript object is a type

</emphasis>
</para>




<para id="p1016">

A JavaScript object encapsulates data and methods and exhibits 
behavior. Despite the similarity of appearance, a JSON string is simply a 
string of characters with a well-defined format. It is not a type and it does 
not exhibit behavior.

</para>




<quote id="blockquote1001" display="block">

At least it doesn't exhibit any behavior that is not expected of any other 
string.

</quote>




<para id="p1017">



<emphasis id="strong1005" effect="bold">
Remember the playscape?

</emphasis>
</para>




<para id="p1018">

Harkening back to an earlier module, a JavaScript object is analogous to the 
playscape in the back yard that has 

<emphasis id="strong1006" effect="bold">
swing

</emphasis>
 and 

<emphasis id="strong1007" effect="bold">
slide

</emphasis>
 
properties. The playscape can "do something" that many children find enjoyable.

</para>




<para id="p1019">

A JSON string is analogous to the well-organized package of parts resulting from 
the disassembly of the playscape. In its disassembled state, the JSON string 
does not have properties like 

<emphasis id="strong1008" effect="bold">
swing

</emphasis>
 and 

<emphasis id="strong1009" effect="bold">
slide

</emphasis>
 
even though all of the parts necessary to support those properties are in the package 
of parts. In that state, all it can do is lay there and take up space. It is 
unlikely that children would find it to be enjoyable.

</para>




<para id="p1020">

I will refer back to the playscape a few more times in this module.

</para>




<para id="p1021">



<emphasis id="strong1010" effect="bold">
Transform a JSON string into a JavaScript object

</emphasis>
</para>




<para id="p1022">

In order to do much in the way of significant processing on the contents of a 
JSON string using JavaScript, you first need to transform it into a JavaScript object. 

<emphasis id="em1004" effect="italics">
(You 
need to reassemble the playscape before the children can play on it.)

</emphasis>
 

</para>




<quote id="blockquote1002" display="block">

If you are working in some other language, you need to transform it into a data 
structure that is appropriate for that language.

</quote>




<para id="p1023">

There are different ways to transform a JSON string into a JavaScript object, 
at least one of which has security problems. 

<emphasis id="em1005" effect="italics">
(The 

<emphasis id="strong1011" effect="bold">
eval

</emphasis>
 function is said to 
have security problems.)

</emphasis>
 

</para>




<para id="p1024">



<emphasis id="strong1012" effect="bold">
The JSON.parse method

</emphasis>
</para>




<para id="p1025">

The 

<link id="a1044" url="http://www.json.org/js.html">

recommended

</link>

 way to transform a 
JSON string into a JavaScript object is to call the 


<emphasis id="strong1013" effect="bold">
JSON.parse

</emphasis>
 method passing the 
JSON string as a parameter. 

</para>




<quote id="blockquote1003" display="block">

The JSON.parse method is apparently supported by most if not all modern 
browsers.

</quote>




<para id="p1026">

The 

<emphasis id="strong1014" effect="bold">
JSON.parse

</emphasis>
 method returns the JavaScript object that 
corresponds to the JSON string. I will use this method in the JavaScript scripts that I will explain later.

</para>




<para id="p1027">



<emphasis id="strong1015" effect="bold">
The
JSON.stringify method

</emphasis>
</para>




<para id="p1028">

On the flip side of the coin, if you need to disassemble that JavaScript playscape object 
into a well-organized package of parts, you can do that by calling the 

<emphasis id="strong1016" effect="bold">

JSON.stringify

</emphasis>
 method passing the JavaScript object as a parameter. 
The 

<emphasis id="strong1017" effect="bold">
JSON.stringify

</emphasis>
 method returns the JSON string that 
represents the object, and amazingly does that even for very complex JavaScript 
objects.

</para>




<quote id="blockquote1004" display="block">

However, the simple form of the JSON.stringify method that I will use in this 
module does not preserve methods that may reside in the JavaScript object.

</quote>




<para id="p1029">

With that as an introduction, let's look at some code.

</para>


	
	

</section>
<section id="h11004">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<section id="h21001">
<title>
<emphasis id="Json0130a" effect="bold">

Json0130a.htm

</emphasis>


</title>




<para id="p1030">
I will explain the three scripts using fragments of code. The first script that 
I will explain is shown in its entirety in 

<link id="a1045" target-id="Listing_16">

Listing 16

</link>

. If you open the file 
named 

<emphasis id="strong1018" effect="bold">
Json0130a.htm

</emphasis>
 in Firefox v26 or a later version, the text shown in 

<link id="a1046" target-id="Figure_1">

Figure 1

</link>

 should be 
displayed in the browser window.

</para>



	

<table id="table1000" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1000">

			

<row id="tr1000">

				

<entry id="th1000">
<emphasis id="Figure_1" effect="bold">

Figure 1

</emphasis>

. Screen output from 
				Json0130a.htm.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1000">

			

<row id="tr1001">

				

<entry id="td1000">



<code id="pre1000" display="block">
Create a JavaScript object.
Unsuccessful attempt to display object.
[object Object]
Display keys in object: name age method
Display values in object: Bill, 31, true

Transform JavaScript object into a JSON string.
Display JSON string {"name":"Bill","age":31}
Unsuccessful attempt to access name and age.
undefined, undefined

Transform the JSON string into a JavaScript object.
Display values in object: Bill, 31
Display keys in object: name age 
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1031">
<emphasis id="em1006" effect="italics">
(Note that I manually inserted some blank lines in 

<link id="a1047" target-id="Figure_1">

Figure 1

</link>

 to make it 
	easier on the eyes.)

</emphasis>
</para>




<para id="p1032">
I will refer back to the contents of 

<link id="a1048" target-id="Figure_1">

Figure 1

</link>

 as I explain the code 
	fragments.

</para>




<para id="p1033">
<emphasis id="strong1019" effect="bold">
Define a JavaScript function

</emphasis>
</para>




<para id="p1034">
<link id="a1049" target-id="Listing_1">

Listing 1

</link>

 shows the beginning of the script and also shows the definition of a simple JavaScript function that will be 
included as part of a JavaScript object. You will see shortly, however, that even though 
this function is part of the object, it is discarded when the object is 
transformed into a JSON string using the simple version of the 

<emphasis id="strong1020" effect="bold">

JSON.stringify

</emphasis>
 
method. 

<emphasis id="em1007" effect="italics">
(More complicated versions of the 


<emphasis id="strong1021" effect="bold">
JSON.stringify

</emphasis>
 method are available in some browsers.)

</emphasis>
</para>




	

<table id="table1001" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1001">

			

<row id="tr1002">

				

<entry id="th1001">
<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Define a JavaScript 
				function.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1001">

			

<row id="tr1003">

				

<entry id="td1001">

				

<code id="pre1001" display="block">  &lt;body&gt;
    &lt;script&gt;
      //Define a function
      function aMethod(){return true;};
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1035">
There is nothing new or exciting about the code in 

<link id="a1050" target-id="Listing_1">

Listing 1

</link>

. This is 
	"plain vanilla" JavaScript programming.

</para>




<para id="p1036">
<emphasis id="strong1022" effect="bold">
Create a JavaScript object

</emphasis>
</para>




<para id="p1037">
The code in 

<link id="a1051" target-id="Listing_2">

Listing 2

</link>

 creates a new JavaScript object containing two 
properties (

<emphasis id="em1008" effect="italics">
name and age)

</emphasis>
 and a method using 

<emphasis id="em1009" effect="italics">
object literal 
notation

</emphasis>
.

</para>




	

<table id="table1002" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1002">

			

<row id="tr1004">

				

<entry id="th1002">
<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Create a JavaScript 
				object.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1002">

			

<row id="tr1005">

				

<entry id="td1002">

				

<code id="pre1002" display="block">
      document.write("Create a JavaScript object.");
      var obj01 = {name:"Bill",age:31,method:aMethod};
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1038">
Recall that there is at least one other way to create an object in 
	JavaScript by using a constructor. I elected this approach because this is 
	the syntax that is most easily confused with the syntax of a JSON string.

</para>




<para id="p1039">
<emphasis id="strong1023" effect="bold">
Explanatory output text

</emphasis>
</para>




<para id="p1040">
The first line of code in 

<link id="a1052" target-id="Listing_2">

Listing 2

</link>

 produces the first line of output text in 


<link id="a1053" target-id="Figure_1">

Figure 1

</link>

. Similar statements will be included at critical points in the 
script 
so that the output will be somewhat self explanatory.

</para>




<para id="p1041">
<emphasis id="strong1024" effect="bold">
Garbage out

</emphasis>
</para>




<para id="p1042">
The code in 

<link id="a1054" target-id="Listing_3">

Listing 3

</link>

 was included to show that unlike in some other 
programming languages such as Java, simply passing a JavaScript object to the


<emphasis id="strong1025" effect="bold">
document.write

</emphasis>
 method does not produce a meaningful output.

</para>




	

<table id="table1003" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1003">

			

<row id="tr1006">

				

<entry id="th1003">
<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Garbage out.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1003">

			

<row id="tr1007">

				

<entry id="td1003">

				

<code id="pre1003" display="block">      document.write(
           "&lt;br/&gt;Unsuccessful attempt to display object.");
      document.write("&lt;br/&gt;" + obj01);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1043">
The code in 

<link id="a1055" target-id="Listing_3">

Listing 3

</link>

 produced the second and third lines of output text 
	in 

<link id="a1056" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1044">
<emphasis id="strong1026" effect="bold">
Display keys in object

</emphasis>
</para>




<para id="p1045">
The code in 

<link id="a1057" target-id="Listing_4">

Listing 4

</link>

 displays the three keys in the object, producing the 
fourth line of text in 

<link id="a1058" target-id="Figure_1">

Figure 1

</link>

.

</para>




	

<table id="table1004" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1004">

			

<row id="tr1008">

				

<entry id="th1004">
<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Display keys in object.


</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1004">

			

<row id="tr1009">

				

<entry id="td1004">

				

<code id="pre1004" display="block">      document.write("&lt;br/&gt;Display keys in object: ");
      for (var key in obj01) {
        if (obj01.hasOwnProperty(key)) {
          document.write(key + " ");
        }//end if
      }//end for loop
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1046">
You may 

<emphasis id="em1010" effect="italics">
(or may not)

</emphasis>
 need to refresh your memory of JavaScript 
	programming to understand the code in 

<link id="a1059" target-id="Listing_4">

Listing 4

</link>

. In any event, so far all 
	the code that we have seen is "plain vanilla" JavaScript code.

</para>




<para id="p1047">
<emphasis id="strong1027" effect="bold">
Display object's values

</emphasis>
</para>




<para id="p1048">
Let's see one more section of "plain vanilla" code before we get into the 
good stuff. 

<link id="a1060" target-id="Listing_5">

Listing 5

</link>

 uses dot notation to display the values of the properties 
in the object producing the output on line 5 in 

<link id="a1061" target-id="Figure_1">

Figure 1

</link>

.

</para>




	

<table id="table1005" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1005">

			

<row id="tr1010">

				

<entry id="th1005">
<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Display object's values.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1005">

			

<row id="tr1011">

				

<entry id="td1005">

				

<code id="pre1005" display="block">      document.write("&lt;br/&gt;Display values in object: ");
      document.write(obj01.name + ", " 
                      + obj01.age + ", " + obj01.method());
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1049">
Note that the value displayed for the key named 

<emphasis id="strong1028" effect="bold">
method

</emphasis>
 
	is the result of evaluating the method: 

<emphasis id="strong1029" effect="bold">
true

</emphasis>
.

</para>




<para id="p1050">
<emphasis id="strong1030" effect="bold">
Cleanup time

</emphasis>
</para>




<para id="p1051">
It's getting a little difficult to find the referenced lines in 

<link id="a1062" target-id="Figure_1">

Figure 1

</link>

. To 
make the output text a little easier to find, 

<link id="a1063" target-id="Figure_2">

Figure 2

</link>

 contains the output text 
lines from 

<link id="a1064" target-id="Figure_1">

Figure 1

</link>

 that haven't been discussed yet.

</para>


	


	

<table id="table1006" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1006">

			

<row id="tr1012">

				

<entry id="th1006">
<emphasis id="Figure_2" effect="bold">

Figure 2

</emphasis>

. Partial screen 
				output from Json0130a.htm.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1006">

			

<row id="tr1013">

				

<entry id="td1006">

							

<code id="pre1006" display="block">Transform JavaScript object into a JSON string.
Display JSON string {"name":"Bill","age":31}
Unsuccessful attempt to access name and age.
undefined, undefined

Transform the JSON string into a JavaScript object.
Display values in object: Bill, 31
Display keys in object: name age 
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>




<para id="p1052">
<emphasis id="em1011" effect="italics">
(Note that once again I manually inserted a blank line in 

<link id="a1065" target-id="Figure_2">

Figure 2

</link>

 to make 
it easier on the eyes.)

</emphasis>
</para>


	

<para id="p1053">
<emphasis id="strong1031" effect="bold">
The good stuff

</emphasis>
</para>


	


<para id="p1054">
Finally, we are ready to see something new and interesting. The call to the 


<emphasis id="strong1032" effect="bold">
JSON.stringify

</emphasis>
 method in 

<link id="a1066" target-id="Listing_6">

Listing 6

</link>

 transforms the JavaScript object 
that was created in 

<link id="a1067" target-id="Listing_2">

Listing 2

</link>

 
into a JSON string and produces the first two lines of output text in 

<link id="a1068" target-id="Figure_2">

Figure 2

</link>

.

</para>


	


	

<table id="table1007" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1007">

			

<row id="tr1014">

				

<entry id="th1007">
<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. Transform JavaScript 
				object into a JSON string.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1007">

			

<row id="tr1015">

				

<entry id="td1007">

				

<code id="pre1007" display="block">      document.write("&lt;br/&gt;Transform JavaScript object " +
                                    "into a JSON string.");
      // Note that the method does not become part of the
      // JSON string.
      var jsonstring = JSON.stringify(obj01);
      document.write(
                "&lt;br/&gt;Display JSON string " + jsonstring );
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1055">
The new JSON string is saved in the variable named 

<emphasis id="strong1033" effect="bold">
jsonstring

</emphasis>
.

</para>




<para id="p1056">
<emphasis id="strong1034" effect="bold">
The method has been lost

</emphasis>
</para>




<para id="p1057">
First note that as indicated earlier, this simple version of the 
	

<emphasis id="strong1035" effect="bold">
JSON.stringify

</emphasis>
 method discards methods belonging to the object when 
	transforming it to a JSON string. Therefore, from this point forward in the 
	script, the method belonging to the original JavaScript object has been 
	lost.

</para>




<para id="p1058">
<emphasis id="strong1036" effect="bold">
Note the similarity

</emphasis>
</para>




<para id="p1059">
Once again, note the similarity between the JSON string shown in the second line of 


<link id="a1069" target-id="Figure_2">

Figure 2

</link>

 and the object literal version of the JavaScript object shown in 


<link id="a1070" target-id="Listing_2">

Listing 
2

</link>

. 

</para>




<para id="p1060">
Having discarded the method, the only difference between the two is that the 
keys in the JSON string are enclosed in quotes while the keys in 

<link id="a1071" target-id="Listing_2">

Listing 2

</link>

 are 
not enclosed in quotes. 

</para>




<quote id="blockquote1005" display="block">
As I understand it, the keys in a JSON string must 
always be enclosed in quotes while quotes are normally optional for keys in the 


<emphasis id="em1012" effect="italics">
object literal

</emphasis>
 declaration of a JavaScript object. 

<emphasis id="em1013" effect="italics">
(Some keys must be 
enclosed in quotes in the object literal syntax for a JavaScript object.)

</emphasis>
</quote>




<para id="p1061">
<emphasis id="strong1037" effect="bold">
Unsuccessful attempt to access name and age

</emphasis>
</para>




<para id="p1062">
However, even though the syntax is very similar, a JSON string is very 
different from a JavaScript object. A JavaScript object is a type having content 
and behavior. A JSON string is just a string of characters having content 
but no behavior. This is illustrated by the code in 

<link id="a1072" target-id="Listing_7">

Listing 7

</link>

, which is very 
similar to the code in 

<link id="a1073" target-id="Listing_5">

Listing 5

</link>

.

</para>




	

<table id="table1008" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1008">

			

<row id="tr1016">

				

<entry id="th1008">
<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. Unsuccessful attempt to 
				access name and age.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1008">

			

<row id="tr1017">

				

<entry id="td1008">

				

<code id="pre1008" display="block">      document.write("&lt;br/&gt;Unsuccessful attempt to " +
                                   "access name and age.");
      document.write("&lt;br/&gt;" + jsonstring.name + ", " 
                                         + jsonstring.age)
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1063">
When dot notation was used to access the 

<emphasis id="strong1038" effect="bold">
name

</emphasis>
 and
	

<emphasis id="strong1039" effect="bold">
age

</emphasis>
 properties of the object in 

<link id="a1074" target-id="Listing_5">

Listing 5

</link>

, the values of 
	those properties were returned and displayed on Line 5 in 

<link id="a1075" target-id="Figure_1">

Figure 1

</link>

.

</para>




<para id="p1064">
When a similar syntax was used in an attempt to access the values associated 
with name and age in 

<link id="a1076" target-id="Listing_7">

Listing 7

</link>

, the result was "undefined" as shown on the 
fourth line of 

<link id="a1077" target-id="Figure_2">

Figure 2

</link>

. In other words, a JSON string is just what it says; 
simply a string of characters.

</para>




<para id="p1065">
<emphasis id="strong1040" effect="bold">
The magic of a JSON string

</emphasis>
</para>




<para id="p1066">
To the extent that there may be magic, the magic of the JSON string 
is 

</para>




<list id="ul1006" list-type="bulleted">

	

<item id="li1040">
the way that the characters are organized to represent the object that was 
used to create the string, and 

</item>


	

<item id="li1041">
the ability to use the characters in that string 
to replicate the object at a later time and possibly in a different location and 
different programming environment.

</item>




</list>




<para id="p1067">
<emphasis id="strong1041" effect="bold">
Cleanup time again

</emphasis>
</para>




<para id="p1068">
Let's create one more simplified Figure showing the script output. 

<link id="a1078" target-id="Figure_3">

Figure 3

</link>

 
shows the last three lines of text from 

<link id="a1079" target-id="Figure_1">

Figure 1

</link>

 that haven't been discussed yet.

</para>




	

<table id="table1009" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1009">

			

<row id="tr1018">

				

<entry id="th1009">
<emphasis id="Figure_3" effect="bold">

Figure 3

</emphasis>

. Partial screen output from Json0130a.htm.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1009">

			

<row id="tr1019">

				

<entry id="td1009">

							

<code id="pre1009" display="block">Transform the JSON string into a JavaScript object.
Display values in object: Bill, 31
Display keys in object: name age
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1069">
<emphasis id="strong1042" effect="bold">
Transform the JSON string into a JavaScript object

</emphasis>
</para>




<para id="p1070">
The first two lines of text in 

<link id="a1080" target-id="Figure_3">

Figure 3

</link>

 were produced by the code in 
	

<link id="a1081" target-id="Listing_8">

Listing 8

</link>

.

</para>




	

<table id="table1010" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1010">

			

<row id="tr1020">

				

<entry id="th1010">
<emphasis id="Listing_8" effect="bold">

Listing 8

</emphasis>

. Transform the JSON string 
				into a JavaScript object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1010">

			

<row id="tr1021">

				

<entry id="td1010">

				

<code id="pre1010" display="block">      document.write("&lt;br/&gt;Transform the JSON string " +
                              "into a JavaScript object.");
      var obj02 = JSON.parse(jsonstring);
      document.write("&lt;br/&gt;Display values in object: ");
      document.write(obj02.name + ", " + obj02.age);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1071">
<emphasis id="strong1043" effect="bold">
Let's pretend

</emphasis>
</para>




<para id="p1072">
For simplicity, I combined the disassembly and the reassembly of the 
	object into a single script. Let's pretend, however, that the code discussed down 
	to this point resides on Computer-A and the remaining code resides on 
	Computer-B at a different location. Pretend that the JSON string 
	created in 

<link id="a1082" target-id="Listing_6">

Listing 6

</link>

 has been transported from Computer-A to Computer-B. 
Now its time for the code in 
	Computer-B to use that 
	JSON string to replicate the original object.

</para>




<para id="p1073">
<emphasis id="strong1044" effect="bold">
Transform the JSON string into a JavaScript object

</emphasis>
</para>




<para id="p1074">
The code in 

<link id="a1083" target-id="Listing_8">

Listing 8

</link>

 calls the 

<emphasis id="strong1045" effect="bold">
JSON.parse

</emphasis>
 method passing the JSON string as 
a parameter to create a replica of the original JavaScript object that was 
created on Computer-A. 

</para>




<para id="p1075">
The


<emphasis id="strong1046" effect="bold">
JSON.parse

</emphasis>
 method uses the JSON 
string to reassemble and return an object that is a replica of the original 
object that was created in 

<link id="a1084" target-id="Listing_2">

Listing 2

</link>

 

<emphasis id="em1014" effect="italics">
(minus the method property, which was 
lost in the creation of the JSON string in 

<link id="a1085" target-id="Listing_6">

Listing 6

</link>

)

</emphasis>
.

</para>




<para id="p1076">
Then 

<link id="a1086" target-id="Listing_8">

Listing 8

</link>

 uses code similar to that shown in 

<link id="a1087" target-id="Listing_5">

Listing 5

</link>

 to access and 
display the values of the remaining two properties of the object as shown by the 
second line in 

<link id="a1088" target-id="Figure_3">

Figure 3

</link>

.

</para>




<para id="p1077">
Finally, the code in 

<link id="a1089" target-id="Listing_9">

Listing 9

</link>

 uses code similar to that shown earlier in 


<link id="a1090" target-id="Listing_4">

Listing 4

</link>

 to display the keys in the new object. The result is shown in the last 
line in 

<link id="a1091" target-id="Figure_3">

Figure 3

</link>

 where the keys are 

<emphasis id="strong1047" effect="bold">
name

</emphasis>
 and 

<emphasis id="strong1048" effect="bold">
age

</emphasis>
 
with the 

<emphasis id="strong1049" effect="bold">
method

</emphasis>
 key missing.

</para>




	

<table id="table1011" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1011">

			

<row id="tr1022">

				

<entry id="th1011">
<emphasis id="Listing_9" effect="bold">

Listing 9

</emphasis>

. Display keys in object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1011">

			

<row id="tr1023">

				

<entry id="td1011">

				

<code id="pre1011" display="block">      document.write("&lt;br/&gt;Display keys in object: ");;
      // Note that it does not contain the method from the
      // original JavaScript object.
      for (var key in obj02) {
        if (obj02.hasOwnProperty(key)) {
          document.write(key + " ");
        }//end if
      }//end for loop

    &lt;/script&gt;
  &lt;/body&gt;
</code>




</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1078">
<link id="a1092" target-id="Listing_9">

Listing 9

</link>

 also signals the end of the script.

</para>




</section>
<section id="h21002">
<title>
<emphasis id="Json0130b" effect="bold">

Json0130b.htm

</emphasis>


</title>




<para id="p1079">
<link id="a1093" target-id="Listing_17">

Listing 17

</link>

 presents a similar but slightly more complicated script than the 
one discussed earlier. As before, I will discuss the code in fragments.

</para>




<para id="p1080">
<emphasis id="strong1050" effect="bold">
Output from the script

</emphasis>
</para>




<para id="p1081">
<link id="a1094" target-id="Figure_4">

Figure 4

</link>

 shows the screen output produced by opening this file in Firefox v26 
or later.

</para>


	

<para id="p1082">
Once again, I manually inserted some blank lines to make it easier on the 
	eyes.

</para>




	

<table id="table1012" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1012">

			

<row id="tr1024">

				

<entry id="th1012">
<emphasis id="Figure_4" effect="bold">

Figure 4

</emphasis>

. Screen output from 
				Json0130b,htm.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1012">

			

<row id="tr1025">

				

<entry id="td1012">



<code id="pre1012" display="block">
Create a JavaScript object involving array data.
Display values in object.
Bill:31
Jill:40

Transform the object into a JSON string.
Display JSON string.
{"friends":[{"name":"Bill","age":31},{"name":"Jill","age":40}]}

Transform the JSON string into a JavaScript object.
Display values in object.
Bill:31
Jill:40 
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1083">
<emphasis id="strong1051" effect="bold">
Create a JavaScript object

</emphasis>
</para>




<para id="p1084">
<link id="a1095" target-id="Listing_10">

Listing 10

</link>

 shows the creation of a JavaScript object and the display of 
	the property values contained in that object.

</para>



	


	

<table id="table1013" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1013">

			

<row id="tr1026">

				

<entry id="th1013">
<emphasis id="Listing_10" effect="bold">

Listing 10

</emphasis>

. Create a JavaScript 
				object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1013">

			

<row id="tr1027">

				

<entry id="td1013">

				

<code id="pre1013" display="block">  &lt;body&gt;
    &lt;script&gt;
      document.write("Create a JavaScript object " +
                                  "involving array data.");
      var obj01 = {friends:[
              {name:"Bill",age:31},{name:"Jill",age:40}]};
      document.write("&lt;br/&gt;Display values in object.");
      document.write("&lt;br/&gt;" + obj01.friends[0].name + 
                               ":" + obj01.friends[0].age);
      document.write("&lt;br/&gt;" + obj01.friends[1].name + 
                               ":" + obj01.friends[1].age);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1085">
<emphasis id="strong1052" effect="bold">
One property is an array

</emphasis>
</para>




<para id="p1086">
This JavaScript object contains a property with a key named 

<emphasis id="strong1053" effect="bold">

	friends

</emphasis>
. The value of the friends property is a JavaScript array 
	containing two JavaScript objects. Therefore, 

<link id="a1096" target-id="Listing_10">

Listing 10

</link>

 uses square bracket 
	([]) notation to access and display the values in the objects that are 
	elements of the array.

</para>





<para id="p1087">
The code in 

<link id="a1097" target-id="Listing_10">

Listing 10

</link>

 produces the first four lines of output text in 


<link id="a1098" target-id="Figure_4">

Figure 
4

</link>

.

</para>




<para id="p1088">
<emphasis id="strong1054" effect="bold">
Transform the object into a JSON string

</emphasis>
</para>




<para id="p1089">
<link id="a1099" target-id="Listing_11">

Listing 11

</link>

 transforms the JavaScript object into a JSON string and displays 
the string.

</para>





	

<table id="table1014" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1014">

			

<row id="tr1028">

				

<entry id="th1014">
<emphasis id="Listing_11" effect="bold">

Listing 11

</emphasis>

. Transform the object 
				into a JSON string.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1014">

			

<row id="tr1029">

				

<entry id="td1014">

				

<code id="pre1014" display="block">      document.write(
          "&lt;br/&gt;Transform the object into a JSON string.");
      var jsontext = JSON.stringify(obj01);
      document.write("&lt;br/&gt;Display JSON string.");
      document.write("&lt;br/&gt;" + jsontext);
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1090">
This produces the three lines of output text in the group near the 
	center of 

<link id="a1100" target-id="Figure_4">

Figure 4

</link>

. Note the similarity of the string shown in 

<link id="a1101" target-id="Figure_4">

Figure 4

</link>

 and 
	the object literal code used to create the JavaScript object in 

<link id="a1102" target-id="Listing_10">

Listing 10

</link>

.

</para>




<quote id="blockquote1006" display="block">
At the risk of becoming boring, I will state once again that even 
though they may look alike, a JSON string is different from a JavaScript object. 
A JavaScript object typically has properties and behavior. A JSON string is 
simply a package of characters and has no properties or behavior other than 
those that may typically be ascribed to any string of characters.

</quote>





<para id="p1091">
<emphasis id="strong1055" effect="bold">
Transform the JSON string into a JavaScript object

</emphasis>
</para>




<para id="p1092">
Finally, 

<link id="a1103" target-id="Listing_12">

Listing 12

</link>

 uses the 

<emphasis id="strong1056" effect="bold">
JSON.parse

</emphasis>
 method to transform the JSON string 
into a JavaScript object and displays the values of the new object's properties. 
The object named 

<emphasis id="strong1057" effect="bold">
obj02

</emphasis>
 is a replica of the original object named 


<emphasis id="strong1058" effect="bold">
obj01

</emphasis>
 that was 
created in 

<link id="a1104" target-id="Listing_10">

Listing 10

</link>

.

</para>





	

<table id="table1015" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1015">

			

<row id="tr1030">

				

<entry id="th1015">
<emphasis id="Listing_12" effect="bold">

Listing 12

</emphasis>

. Transform the JSON 
				string into a JavaScript object.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1015">

			

<row id="tr1031">

				

<entry id="td1015">

				

<code id="pre1015" display="block">      document.write("&lt;br/&gt;Transform the JSON string " +
                              "into a JavaScript object.");
      var obj02 = JSON.parse(jsontext);
      document.write("&lt;br/&gt;Display values in object.");
      document.write("&lt;br/&gt;" + obj02.friends[0].name 
                             + ":" + obj02.friends[0].age);
      document.write("&lt;br/&gt;" + obj02.friends[1].name 
                             + ":" + obj02.friends[1].age);

    &lt;/script&gt;
  &lt;/body&gt;
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1093">
The code in 

<link id="a1105" target-id="Listing_12">

Listing 12

</link>

 produces the bottom four lines of output text 
	shown in 

<link id="a1106" target-id="Figure_4">

Figure 4

</link>

.

</para>




<para id="p1094">
<link id="a1107" target-id="Listing_12">

Listing 12

</link>

 also signals the end of the script.

</para>




</section>
<section id="h21003">
<title>
<emphasis id="A_word_of_caution" effect="bold">

A word of caution

</emphasis>


</title>




<para id="p1095">
At this point, I want to alert you to a possible terminology issue that you 
may encounter while searching the web for information about JSON.

</para>




<para id="p1096">
<emphasis id="strong1059" effect="bold">
Possible terminology issue

</emphasis>
</para>




<para id="p1097">
<link id="a1108" target-id="Listing_13">

Listing 13

</link>

 contains a scaled down version of code that I copied from 


<link id="a1109" url="http://www.w3schools.com/json/json_intro.asp">

http://www.w3schools.com/json/json_intro.asp

</link>

 plus 
some code that 
I added myself.

</para>




	

<table id="table1016" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1016">

			

<row id="tr1032">

				

<entry id="th1016">
<emphasis id="Listing_13" effect="bold">

Listing 13

</emphasis>

. Possible terminology 
				issue.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1016">

			

<row id="tr1033">

				

<entry id="td1016">



<code id="pre1016" display="block">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
&lt;h2&gt;JSON Object Creation in JavaScript&lt;/h2&gt;

&lt;p&gt;
Name: &lt;span id="jname"&gt;&lt;/span&gt;&lt;br /&gt;
Age: &lt;span id="jage"&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;script&gt;
var JSONObject= {
"name":"John Johnson",
"age":33};
document.getElementById("jname").innerHTML=JSONObject.name
document.getElementById("jage").innerHTML=JSONObject.age

document.write("Code added by Baldwin");
var JSONstring = JSON.stringify(JSONObject);
document.write("&lt;br/&gt; " + JSONstring);
var JSObject = JSON.parse(JSONstring);
document.write("&lt;br/&gt; " + JSObject.name + ", " + JSObject.age);
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1098">
<emphasis id="strong1060" effect="bold">
The variable named JSONObject

</emphasis>
</para>




<para id="p1099">
Despite the name, the variable named 

<emphasis id="strong1061" effect="bold">
JSONObject

</emphasis>
 in 

<link id="a1110" target-id="Listing_13">

Listing 13

</link>

 
appears to be an ordinary JavaScript object in 

<emphasis id="em1015" effect="italics">
object literal

</emphasis>
 
	format that has nothing to do with JSON.

</para>




<quote id="blockquote1007" display="block">
The keys 

<emphasis id="strong1062" effect="bold">
"name"

</emphasis>
 and 

<emphasis id="strong1063" effect="bold">
"age"

</emphasis>
 in 

<link id="a1111" target-id="Listing_13">

Listing 13

</link>

 
are enclosed in double quotes, which may be a little unusual, but is perfectly 
valid for a JavaScript object. Although JSON keys must be enclosed in quotes, 
enclosing JavaScript object keys in quotes does not produce a JSON string.

</quote>




<para id="p1100">
<emphasis id="strong1064" effect="bold">
A terminology issue?

</emphasis>
</para>




<para id="p1101">
This is probably just a terminology issue. However, 
	I don't see anything in the original script at
	

<link id="a1112" url="http://www.w3schools.com/json/json_intro.asp">

w3schools.com

</link>

 
	that illustrates anything about JSON.

</para>




<para id="p1102">
<emphasis id="strong1065" effect="bold">
Stringify the JavaScript object

</emphasis>
</para>




<para id="p1103">
To illustrate that 

<emphasis id="strong1066" effect="bold">
JSONObject

</emphasis>
 is a 
JavaScript object 

<emphasis id="em1016" effect="italics">
(and is not JSON text)

</emphasis>
, the code in 

<link id="a1113" target-id="Listing_13">

Listing 13

</link>

 converts it into a JSON string by 
passing it to the 

<emphasis id="strong1067" effect="bold">
JSON.stringify

</emphasis>
 method. 

</para>




<para id="p1104">
After discussing the 
parsing of JSON text, the document at 

<link id="a1114" url="http://www.json.org/js.html">

JSON in JavaScript

</link>

 
states

</para>




<quote id="blockquote1008" display="block">
"A JSON stringifier goes in the opposite direction, converting 
JavaScript data structures into JSON text."

</quote>




<para id="p1105">
The fact that 

<emphasis id="strong1068" effect="bold">
JSON.stringify

</emphasis>
 will accept 

<emphasis id="strong1069" effect="bold">
JSONObject

</emphasis>
 
as an incoming parameter and return a JSON string seems to confirm that 

<emphasis id="strong1070" effect="bold">
JSONObject

</emphasis>
 is a JavaScript data structure


<emphasis id="em1017" effect="italics">
(an object)

</emphasis>
.

</para>




<para id="p1106">
<emphasis id="strong1071" effect="bold">
Parse the JSON string

</emphasis>
</para>




<para id="p1107">
After displaying the JSON string, 

<link id="a1115" target-id="Listing_13">

Listing 13

</link>

 calls 
the 

<emphasis id="strong1072" effect="bold">
JSON.parse

</emphasis>
 method, passing the JSON string as a parameter, to 
replicate the original JavaScript 
object and displays the values of the object's properties. The screen output is shown in 

<link id="a1116" target-id="Figure_5">

Figure 5

</link>

.

</para>





<para id="p1108">
<emphasis id="strong1073" effect="bold">
<emphasis id="Figure_5" effect="bold">

Figure 5

</emphasis>

. Possible terminology issue.

</emphasis>
</para>




<para id="p1109">
<media id="media1000" alt="Missing Figure" display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/json0130a.jpg" width="428" height="350"/>
</media>


</para>






<para id="p1110">
<emphasis id="strong1074" effect="bold">
Be wary of "JSON objects"

</emphasis>
</para>




<para id="p1111">
So, the word of caution is, be wary of material that refers to JSON 
objects. According to 

<link id="a1117" url="http://www.json.org/">

Introducing JSON

</link>


</para>




<quote id="blockquote1009" display="block">
"JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. These properties make JSON an ideal data-interchange language." 


</quote>




<para id="p1112">
The reason that JSON is a text format is probably the same reason that XML is a text 
format. The use of a text format 

<emphasis id="em1018" effect="italics">
(as opposed to some proprietary object 
format)

</emphasis>
 ensures that the format can be read by almost any programming 
language running on almost any computer.

</para>




</section>
<section id="h21004">
<title>
<emphasis id="Recognizing_the_difference" effect="bold">

Recognizing the difference

</emphasis>


</title>




<para id="p1113">
Given all of the above, you might be wondering how to distinguish between a 
JavaScript object in 

<emphasis id="em1019" effect="italics">
object literal

</emphasis>
 format and a JSON string. It all 
comes down to syntax.

</para>




<para id="p1114">
<link id="a1118" target-id="Listing_18">

Listing 18

</link>

 presents a simple script that 
illustrates the difference. Once again, I will discuss it in fragments.

</para>




<para id="p1115">
<emphasis id="strong1075" effect="bold">
A comparison

</emphasis>
</para>




<para id="p1116">
<link id="a1119" target-id="Listing_14">

Listing 14

</link>

 shows a JavaScript object in 

<emphasis id="em1020" effect="italics">
object literal

</emphasis>
 format and a 
JSON string on two consecutive lines to make them easy to compare.

</para>


	

<table id="table1017" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1017">

			

<row id="tr1034">

				

<entry id="th1017">
<emphasis id="Listing_14" effect="bold">

Listing 14

</emphasis>

. Comparison of object 
				and string.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1017">

			

<row id="tr1035">

				

<entry id="td1017">


				

<code id="pre1017" display="block">&lt;body&gt;
  &lt;script&gt;
    var jScrObj01 =  {"name":"John","age":33};
    var jSonStr01 = '{"name":"Bill","age":33}';
    
    document.write("&lt;br/&gt;1. " + jScrObj01.name);
    document.write("&lt;br/&gt;2. " + jSonStr01.name);
    
    document.write("&lt;br/&gt;3. " + jScrObj01);
    document.write("&lt;br/&gt;4. " + jSonStr01);</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>



	

<para id="p1117">
The variable named 

<emphasis id="strong1076" effect="bold">
jScrObj01

</emphasis>
 is 

<emphasis id="em1021" effect="italics">
(or contains)

</emphasis>
 a JavaScript object.

</para>




<para id="p1118">
The variable named 

<emphasis id="strong1077" effect="bold">
jSonStr01

</emphasis>
 is 

<emphasis id="em1022" effect="italics">
(or contains)

</emphasis>
 a JSON string.

</para>




<para id="p1119">
The only difference between the two is the pair of single quotes that 
surrounds the expression on the right side of the assignment operator for


<emphasis id="strong1078" effect="bold">
jSonStr01

</emphasis>
.

</para>




<quote id="blockquote1010" display="block">
The keys in the JavaScript object are surrounded by double quotes. 
	This is optional. If those quotes were removed, the JavaScript object would 
still be a JavaScript object.

</quote>





<para id="p1120">
<emphasis id="strong1079" effect="bold">
Output from the script

</emphasis>
</para>


	

<para id="p1121">
After creating the JavaScript object and the JSON string, the code in
	

<link id="a1120" target-id="Listing_14">

Listing 14

</link>

 executes four 

<emphasis id="strong1080" effect="bold">
write

</emphasis>
 
	statements to display information about the object and the string. The 
	results are shown in 

<link id="a1121" target-id="Figure_6">

Figure 6

</link>

.

</para>




	

<table id="table1018" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1018">

			

<row id="tr1036">

				

<entry id="th1018">
<emphasis id="Figure_6" effect="bold">

Figure 6

</emphasis>

. Output from the 
				script.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1018">

			

<row id="tr1037">

				

<entry id="td1018">



<code id="pre1018" display="block">
1. John
2. undefined
3. [object Object]
4. {"name":"Bill","age":33}
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1122">
Without getting into the details, the output in 

<link id="a1122" target-id="Figure_6">

Figure 
	6

</link>

 confirms that 

<emphasis id="strong1081" effect="bold">
jScrObj01

</emphasis>
 contains a JavaScript object 
	and
	

<emphasis id="strong1082" effect="bold">
jSonStr01

</emphasis>
 contains a JSON string.

</para>




<para id="p1123">
<emphasis id="strong1083" effect="bold">
Transform them both

</emphasis>
</para>




<para id="p1124">
The code in 

<link id="a1123" target-id="Listing_15">

Listing 15

</link>

 

</para>




<list id="ul1007" list-type="bulleted">

	

<item id="li1042">
calls the 

<emphasis id="strong1084" effect="bold">
JSON.parse

</emphasis>
 method to transform the JSON string into a 
	JavaScript object, and

</item>


	

<item id="li1043">
calls the 

<emphasis id="strong1085" effect="bold">
JSON.stringify

</emphasis>
 method to transform the JavaScript object into 
	a JSON string.

</item>




</list>





	

<table id="table1019" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1019">

			

<row id="tr1038">

				

<entry id="th1019">
<emphasis id="Listing_15" effect="bold">

Listing 15

</emphasis>

. Transform them both.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1019">

			

<row id="tr1039">

				

<entry id="td1019">



<code id="pre1019" display="block">
    var jScrObj02 = JSON.parse(jSonStr01);
    var jSonStr02 = JSON.stringify(jScrObj01);
    
    document.write("&lt;br/&gt;5. " + jScrObj02.name);
    document.write("&lt;br/&gt;6. " + jSonStr02.name);
    
    document.write("&lt;br/&gt;7. " + jScrObj02);
    document.write("&lt;br/&gt;8. " + jSonStr02);
  &lt;/script&gt;

&lt;/body&gt;
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>




	

<para id="p1125">
<emphasis id="strong1086" effect="bold">
Output from the script

</emphasis>
</para>




<para id="p1126">
After that, the code in 

<link id="a1124" target-id="Listing_15">

Listing 15

</link>

 executes four 

<emphasis id="strong1087" effect="bold">
write

</emphasis>
 
	statements to display information about the new object and the new string. The 
	results are shown in 

<link id="a1125" target-id="Figure_7">

Figure 7

</link>

.

</para>





	

<table id="table1020" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1020">

			

<row id="tr1040">

				

<entry id="th1020">
<emphasis id="Figure_7" effect="bold">

Figure 7

</emphasis>

. Output from the script.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1020">

			

<row id="tr1041">

				

<entry id="td1020">



<code id="pre1020" display="block">
5. Bill
6. undefined
7. [object Object]
8. {"name":"John","age":33} 
</code>



							

</entry>

						

</row>

					

</tbody>


				

</tgroup>
</table>


	

<para id="p1127">
Once again, without getting into the details, the output in 

<link id="a1126" target-id="Figure_7">

Figure 7

</link>

 confirms that 

<emphasis id="strong1088" effect="bold">
jScrObj02

</emphasis>
 is a JavaScript object
	and
	

<emphasis id="strong1089" effect="bold">
jSonStr02

</emphasis>
 is a JSON string.

</para>





</section>
</section>
<section id="h11005">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the scripts

</emphasis>


</title>





<para id="p1128">
I encourage you to copy the code from 

<link id="a1127" target-id="Listing_16">

Listing 16

</link>

, 

<link id="a1128" target-id="Listing_17">

Listing 17

</link>

, 


<link id="a1129" target-id="Listing_18">

Listing 18

</link>

, and 

<link id="a1130" target-id="Listing_13">

Listing 13

</link>

. Load the code into your favorite browser and observe the output. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>




</section>
<section id="h11006">
<title>
<emphasis id="Debugging_JavaScript" effect="bold">

Debugging JavaScript

</emphasis>


</title>




<para id="p1129">
Finding and correcting errors in your JavaScript code can be difficult. 
Sometimes when your JavaScript isn't working properly, opening the Firefox Web 
Console will provide useful diagnostic information about the error.

</para>




<para id="p1130">
To open the Web Console in Firefox version 26,

</para>




<list id="ul1008" list-type="bulleted">

	

<item id="li1044">
Select Tools

</item>


	

<item id="li1045">
Hover on Web Developer

</item>


	

<item id="li1046">
Select Web Console

</item>




</list>


	

</section>
<section id="h11007">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1131">
This section contains a variety of miscellaneous information. 

</para>





	

<note id="note1000" type="">


		


			


				

<emphasis id="strong1090" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1009" list-type="bulleted">

					

<item id="li1047">
Module name: Json0130: JSON and JavaScript

</item>


					

<item id="li1048">
File: Json0130.htm


</item>


					

<item id="li1049">
Published: 02/02/14

</item>




<item id="li1050">
Revised: 02/08/16

</item>


				

</list>


				

</note>

			


		



	






	

<note id="note1001" type="">


		


			


				

<emphasis id="strong1091" effect="bold">
Disclaimers:

</emphasis>
<para id="p1132">
<emphasis id="strong1092" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>


				

<para id="p1133">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>


				

<para id="p1134">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>


				

<para id="p1135">
<emphasis id="strong1093" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>


				

</note>

			


		



	





</section>
<section id="h11008">
<title>
<emphasis id="Complete_program_listing" effect="bold">

Complete script listings

</emphasis>


</title>








<para id="p1136">
<emphasis id="strong1094" effect="bold">
<emphasis id="Listing_16" effect="bold">

Listing 16

</emphasis>

. Json0130a.htm.

</emphasis>
</para>






<code id="pre1021" display="block">
&lt;!--01/26/14
Illustrates the difference between the syntax of a 
JavaScript object and a JSON string that looks a lot like 
a JavaScript object.

Must parse the JSON string to turn it into a JavaScript 
object before processing it using JavaScript. 

Uses JSON.stringify to produce a JSON string from a 
JavaScript object. 

Uses JSON.parse to produce a JavaScript object from 
a JSON string.--&gt;

&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
      &lt;title&gt;ParseJSON01&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script&gt;
      //Define a function
      function aMethod(){return true;};
      document.write("Create a JavaScript object.");
      var obj01 = {name:"Bill",age:31,method:aMethod};
      document.write(
           "&lt;br/&gt;Unsuccessful attempt to display object.");
      document.write("&lt;br/&gt;" + obj01);
      document.write("&lt;br/&gt;Display keys in object: ");
      for (var key in obj01) {
        if (obj01.hasOwnProperty(key)) {
          document.write(key + " ");
        }//end if
      }//end for loop
      document.write("&lt;br/&gt;Display values in object: ");
      document.write(obj01.name + ", " 
                      + obj01.age + ", " + obj01.method());

      document.write("&lt;br/&gt;Transform JavaScript object " +
                                    "into a JSON string.");
      // Note that the method does not become part of the
      // JSON string.
      var jsonstring = JSON.stringify(obj01);
      document.write(
                "&lt;br/&gt;Display JSON string " + jsonstring );
      document.write("&lt;br/&gt;Unsuccessful attempt to " +
                                   "access name and age.");
      document.write("&lt;br/&gt;" + jsonstring.name + ", " 
                                         + jsonstring.age);

      document.write("&lt;br/&gt;Transform the JSON string " +
                              "into a JavaScript object.");
      var obj02 = JSON.parse(jsonstring);
      document.write("&lt;br/&gt;Display values in object: ");
      document.write(obj02.name + ", " + obj02.age);

      document.write("&lt;br/&gt;Display keys in object: ");;
      // Note that it does not contain the method from the
      // original JavaScript object.
      for (var key in obj02) {
        if (obj02.hasOwnProperty(key)) {
          document.write(key + " ");
        }//end if
      }//end for loop

    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code>






	

<table id="table1021" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1021">

			

<row id="tr1042">

				

<entry id="th1021">
<emphasis id="Listing_17" effect="bold">

Listing 17

</emphasis>

. Json0130b.htm.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1021">

			

<row id="tr1043">

				

<entry id="td1021">



<code id="pre1022" display="block">
&lt;!--01/26/14---------------------------------------------//
Illustrates the difference between the syntax of a 
JavaScript object a JSON string that looks a lot like a 
JavaScript object where each involves array data. Must 
parse the JSON text to turn it into a JavaScript object 
before processing it using JavaScript. --&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;ParseJSON02&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script&gt;
      document.write("Create a JavaScript object " +
                                  "involving array data.");
      var obj01 = {friends:[
              {name:"Bill",age:31},{name:"Jill",age:40}]};
      document.write("&lt;br/&gt;Display values in object.");
      document.write("&lt;br/&gt;" + obj01.friends[0].name + 
                               ":" + obj01.friends[0].age);
      document.write("&lt;br/&gt;" + obj01.friends[1].name + 
                               ":" + obj01.friends[1].age);
      
      document.write(
          "&lt;br/&gt;Transform the object into a JSON string.");
      var jsontext = JSON.stringify(obj01);
      document.write("&lt;br/&gt;Display JSON string.");
      document.write("&lt;br/&gt;" + jsontext);
      document.write("&lt;br/&gt;Transform the JSON string " +
                              "into a JavaScript object.");
      var obj02 = JSON.parse(jsontext);
      document.write("&lt;br/&gt;Display values in object.");
      document.write("&lt;br/&gt;" + obj02.friends[0].name 
                             + ":" + obj02.friends[0].age);
      document.write("&lt;br/&gt;" + obj02.friends[1].name 
                             + ":" + obj02.friends[1].age);

    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>










	

<table id="table1022" summary="This is a table." pgwide="677">
<tgroup cols="1">


		

<thead id="thead1022">

			

<row id="tr1044">

				

<entry id="th1022">
<emphasis id="Listing_18" effect="bold">

Listing 18

</emphasis>

. Json0130d.htm.

</entry>

			

</row>

		

</thead>


		

<tbody id="tbody1022">

			

<row id="tr1045">

				

<entry id="td1022">



<code id="pre1023" display="block">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

  &lt;script&gt;
    var jScrObj01 =  {"name":"John","age":33};
    var jSonStr01 = '{"name":"Bill","age":33}';
    
    document.write("&lt;br/&gt;1. " + jScrObj01.name);
    document.write("&lt;br/&gt;2. " + jSonStr01.name);
    
    document.write("&lt;br/&gt;3. " + jScrObj01);
    document.write("&lt;br/&gt;4. " + jSonStr01);
    
    var jScrObj02 = JSON.parse(jSonStr01);
    var jSonStr02 = JSON.stringify(jScrObj01);
    
    document.write("&lt;br/&gt;5. " + jScrObj02.name);
    document.write("&lt;br/&gt;6. " + jSonStr02.name);
    
    document.write("&lt;br/&gt;7. " + jScrObj02);
    document.write("&lt;br/&gt;8. " + jSonStr02);
  &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</code>



				

</entry>

			

</row>

		

</tbody>


	

</tgroup>
</table>








<para id="p1137">
-end- 

</para>






</section>
</content>




</document>