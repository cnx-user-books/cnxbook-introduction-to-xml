<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>XML - Namespaces - Flex 3</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m34600</md:content-id>
  <md:title>XML - Namespaces - Flex 3</md:title>
  <md:abstract>Learn enough about XML namespaces to be able to handle the namespace requirements of simple Flex projects. Also get your first taste of creating MXML files for Flex projects.</md:abstract>
  <md:uuid>a783d6c7-2674-4425-be32-5f788a927ec1</md:uuid>
</metadata>

<content>



















<note id="note1000" type="miscellaneous">





Click 

<link id="a1000" url="Namespace01.html">

Namespace01

</link>


to run this Flex program. 

<emphasis id="em1000" effect="italics">

(Click the "Back" button in your browser
to return to this page.)

</emphasis>



</note>







<section id="h11000">
<title>
Table of Contents

</title>




<list id="ul1000" list-type="bulleted">

  

<item id="li1000">
<link id="a1001" target-id="Preface">

Preface

</link>

 
    

<list id="ul1001" list-type="bulleted">

      

<item id="li1001">
<link id="a1002" target-id="General">

General

</link>


</item>


      

<item id="li1002">
<link id="a1003" target-id="Viewing_tip">

Viewing tip

</link>

 
        

<list id="ul1002" list-type="bulleted">

          

<item id="li1003">
<link id="a1004" target-id="Figures">

Figures

</link>


</item>


          

<item id="li1004">
<link id="a1005" target-id="Listings">

Listings

</link>


</item>


        

</list>


      

</item>


      

<item id="li1005">
<link id="a1006" target-id="Supplementary_material">

Supplemental material

</link>


</item>


    

</list>


  

</item>


  

<item id="li1006">
<link id="a1007" target-id="GeneralBackgroundInformation">

General background information

</link>


</item>


  

<item id="li1007">
<link id="a1008" target-id="Preview">

Preview

</link>


</item>


  

<item id="li1008">
<link id="a1009" target-id="DiscussionandSamplePrograms">

Discussion and sample code

</link>


</item>


  

<item id="li1009">
<link id="a1010" target-id="Resources">

Resources

</link>


</item>


	

<item id="li1010">
<link id="a1011" target-id="Miscellaneous">

Miscellaneous

</link>


</item>




</list>







<para id="p1000">
</para>







</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">


</emphasis>

Preface

</title>







<section id="h21000">
<title>
<emphasis id="General" effect="bold">

General

</emphasis>


</title>





<para id="p1001">
This tutorial lesson is part 
of a series dedicated to programming with Adobe Flex.

</para>





<para id="p1002">
Flex is a programming 
language based on XML. Therefore, in order to program with Flex, you must first 
understand XML. The lessons in this XML series provide a brief introduction to 
XML.

</para>





</section>
<section id="h21001">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>





<para id="p1003">
I recommend that you open another copy of this document in a separate browser 
window and use the following links to easily find and view the figures and 
listings while you are reading about them.

</para>





<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>




<list id="ul1003" list-type="bulleted">

  

<item id="li1011">
<link id="a1012" target-id="Figure_1">

Figure 1

</link>

. The directory tree for the project named 
  Namespace01.

</item>


  

<item id="li1012">
<link id="a1013" target-id="Figure_2">

Figure 2

</link>

. Program output at startup.

</item>


  

<item id="li1013">
<link id="a1014" target-id="Figure_3">

Figure 3

</link>

. Screen output for upgraded Flex project.

</item>




</list>





</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>




<list id="ul1004" list-type="bulleted">

  

<item id="li1014">
<link id="a1015" target-id="Listing_1">

Listing 1

</link>

. Skeleton MXML code for a new Flex 
  project.

</item>


  

<item id="li1015">
<link id="a1016" target-id="Listing_2">

Listing 2

</link>

. Upgraded Flex project code.

</item>


  

<item id="li1016">
<link id="a1017" target-id="Listing_3">

Listing 3

</link>

. Contents of the file named Label.mxml.

</item>


  

<item id="li1017">
<link id="a1018" target-id="Listing_4">

Listing 4

</link>

. Contents of the file named Button.mxml

</item>


  

<item id="li1018">
<link id="a1019" target-id="Listing_5">

Listing 5

</link>

. Contents of the file named 
  NameSpace01.mxml.

</item>




</list>





</section>
</section>
<section id="h21002">
<title>
<emphasis id="Supplementary_material" effect="bold">

Supplemental material

</emphasis>


</title>





<para id="p1004">
I recommend that you also 
study the other lessons in my extensive collection of online programming 
tutorials. You will find a consolidated index at 

<link id="a1020" url="http://www.dickbaldwin.com/toc.htm">

www.DickBaldwin.com

</link>

.

</para>





</section>
</section>
<section id="h11002">
<title>
<emphasis id="GeneralBackgroundInformation" effect="bold">

General background information

</emphasis>


</title>





<para id="p1005">
XML namespaces make it 
possible to combine two or more XML documents into a single XML document and to 
deal with problems that arise when the same name is used for an element in two 
or more of the XML documents.

</para>





</section>
<section id="h11003">
<title>
<emphasis id="Preview" effect="bold">

Preview

</emphasis>


</title>





<para id="p1006">
The XML namespace topic is very broad. I won't attempt to cover the topic of namespaces in this lesson. Instead, I will illustrate and explain a 
somewhat restricted use of namespaces by explaining a Flex project that combines 
three XML documents with conflicting element names.

</para>





<para id="p1007">
Before getting into the detailed code, I will show you a couple of images 
that I will be referring back to later.

</para>





<para id="p1008">
<emphasis id="strong1000" effect="bold">
The project file structure

</emphasis>
</para>





<para id="p1009">
When you create a Flex project, you create a directory tree on the disk to 
contain the files and folders that make up the project. The tree is rooted in a 
folder that has the same name as the name that you give to the project. In this 
lesson, I will explain a Flex project named Namespace01.

</para>





<para id="p1010">
Figure 1 shows the directory tree for this project. Figure 1 is a snapshot of 
the Flex Builder 3 Navigator panel.

</para>





<figure id="figure1000" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_1" effect="bold">
</emphasis>
The directory tree for the project  	named Namespace01.
</title>



			

<media id="media1000" alt="Missing image." display="block">
<image id="img1000" mime-type="image/jpeg" src="../../media/flex0086a.jpg" width="262" height="252"/>
</media>




<caption>The directory tree for the project  	named Namespace01.</caption>
</figure>







<para id="p1011">
<emphasis id="strong1001" effect="bold">
Lots of folders and files

</emphasis>
</para>





<para id="p1012">
The directory tree contains a relatively large number of folders and files. 
Fortunately, most of the folders and files are generated automatically by Flex 
Builder 3. As Flex programmers, we are primarily interested in the folders and 
files that are children of the folder named 

<emphasis id="strong1002" effect="bold">
src

</emphasis>
.

</para>





<para id="p1013">
For this project I had to create the following files and folders:

</para>




<list id="ul1005" list-type="bulleted">

  

<item id="li1019">
The file named 

<emphasis id="strong1003" effect="bold">
Namespace01.mxml

</emphasis>
</item>


  

<item id="li1020">
The folder named 

<emphasis id="strong1004" effect="bold">
customComps

</emphasis>
</item>


  

<item id="li1021">
The file named 

<emphasis id="strong1005" effect="bold">
Button.mxml

</emphasis>
</item>


  

<item id="li1022">
The file named 

<emphasis id="strong1006" effect="bold">
Label.mxml

</emphasis>
</item>




</list>





<para id="p1014">
<emphasis id="strong1007" effect="bold">
Create a graphical user interface (GUI)

</emphasis>
</para>





<para id="p1015">
If you continue in your study of Flex programming, you will learn that one of 
the most important uses of Flex is to create a graphical user interface (GUI) to 
provide the user interface for programs that are written in the ActionScript 
programming language.

</para>





<para id="p1016">
While you may not be familiar with the jargon term GUI, I know that you are 
familiar with the use of a GUI. The GUI is generally considered to consist of 
the buttons, menus, text fields, etc. that you interact with when you run a 
program on a modern desktop or laptop computer.

</para>





<para id="p1017">
<emphasis id="strong1008" effect="bold">
Two buttons, three labels, etc.

</emphasis>
</para>





<para id="p1018">
This project creates a GUI with two buttons and three labels in a


<emphasis id="strong1009" effect="bold">
VBox

</emphasis>
 container with a red background as shown in Figure 2.

</para>




<figure id="figure1001" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_2" effect="bold">
</emphasis>
Program output at startup.
</title>



			

<media id="media1001" alt="Missing image." display="block">
<image id="img1001" mime-type="image/jpeg" src="../../media/flex0086b.jpg" width="251" height="366"/>
</media>




<caption>Program output at startup.</caption>
</figure>







<para id="p1019">
<emphasis id="strong1010" effect="bold">
The buttons are not active

</emphasis>
</para>





<para id="p1020">
Nothing happens if you click the buttons in the GUI. The program isn't very 
interesting from an operational viewpoint. The thing that is interesting is that 
I purposely created name conflicts and resolved them through the use of XML 
namespaces. I will explain how I did that.

</para>





<para id="p1021">
<emphasis id="strong1011" effect="bold">
Two standard components

</emphasis>
</para>





<para id="p1022">
The size of the red 

<emphasis id="strong1012" effect="bold">
VBox

</emphasis>
 container was set to exactly match 
the size needed to contain the four components. The yellow label with the text


<emphasis id="strong1013" effect="bold">
Standard Label

</emphasis>
 and the button labeled 

<emphasis id="strong1014" effect="bold">
Standard Button

</emphasis>
 
are standard Flex components. As you will see shortly, they are created by 
creating instances of the standard Flex components named


<emphasis id="strong1015" effect="bold">
Label

</emphasis>
 and 

<emphasis id="strong1016" effect="bold">
Button

</emphasis>
.

</para>





<para id="p1023">
<emphasis id="strong1017" effect="bold">
A conflict with the name Label

</emphasis>
</para>





<para id="p1024">
The yellow label with the text 

<emphasis id="strong1018" effect="bold">
Custom Label

</emphasis>
 and the cyan 
rectangle containing a label and a button are both custom components. The yellow 
label in the middle was created by combining the XML file named


<emphasis id="strong1019" effect="bold">
Namespace01.mxml

</emphasis>
 shown in Figure 1 with the file named


<emphasis id="strong1020" effect="bold">
Label.mxml

</emphasis>
, which is also shown in Figure 1. This created a 
name conflict because the name of the file, 

<emphasis id="strong1021" effect="bold">
Label

</emphasis>
, is the same 
as the name of the yellow label at the top of the red 

<emphasis id="strong1022" effect="bold">
VBox

</emphasis>
.

</para>





<para id="p1025">
<emphasis id="strong1023" effect="bold">
A conflict with the name Button

</emphasis>
</para>





<para id="p1026">
The cyan component containing the button and the label was created by 
combining the XML file named 

<emphasis id="strong1024" effect="bold">
Namespace01.mxml

</emphasis>
 shown in Figure 1 
with the file named 

<emphasis id="strong1025" effect="bold">
Button.mxml

</emphasis>
, which is also shown in Figure 
1. This also created a name conflict because the name of the file,


<emphasis id="strong1026" effect="bold">
Button

</emphasis>
, is the same as the name of the standard button.

</para>





<para id="p1027">
<emphasis id="strong1027" effect="bold">
Start with a simple project

</emphasis>
</para>





<para id="p1028">
Now that you have the big picture in mind, it's time to drill down a little 
deeper and take a look at the three XML files used in this project. However, I'm 
going to start out with a very simple project and work my way up to the project 
that created the output shown in Figure 2.

</para>







</section>
<section id="h11004">
<title>
<emphasis id="DiscussionandSamplePrograms" effect="bold">


</emphasis>

Discussion and sample code

</title>







<para id="p1029">
<emphasis id="strong1028" effect="bold">
Two ways to create Flex projects

</emphasis>
</para>





<para id="p1030">
Flex projects can be created 
using nothing more than a text editor and a Flex software development kit (SDK) 
that is freely available from the Adobe website. However, to make the 
development of Flex projects a little easier, Adobe sells a product named Flex 
Builder 3 that includes the SDK along with a visual project editor. The project 
that I will explain in this lesson was created using Flex Builder 3. 

</para>




<quote id="blockquote1000" display="block">
<emphasis id="em1001" effect="italics">
(Note that as of 
June 2010, the product named Flex Builder 3 has been replaced by a product named 
Flash Builder 4 to accommodate the release of version 4 of Flex. I will be 
covering both Flex 3 and Flex 4 in this series of lessons.)

</emphasis>
</quote>





<para id="p1031">
<emphasis id="strong1029" effect="bold">
Skeleton MXML code for a new Flex project

</emphasis>
</para>





<para id="p1032">
When you create a new Flex project in Flex Builder 3, a skeleton of the 
required MXML file is created for you. Listing 1 shows the contents of such a 
skeleton MXML file.

</para>





<example id="listing1000" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_1" effect="bold">
</emphasis>
Skeleton MXML code for a new Flex project.
</title>







<code id="pre1000" display="block">&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;mx:Application 
  xmlns:mx="http://www.adobe.com/2006/mxml" 
  layout="absolute"&gt;

&lt;/mx:Application&gt;</code>




</example>







<quote id="blockquote1001" display="block">
<emphasis id="em1002" effect="italics">
(Listing 1 shows the skeleton code for a Flex 3 project. The 
skeleton code for a Flex 4 project is somewhat more complicated.)

</emphasis>
</quote>




<para id="p1033">
<emphasis id="strong1030" effect="bold">
The XML declaration

</emphasis>
</para>





<para id="p1034">
The line of code that begins with the left angle bracket followed by 

<emphasis id="strong1031" effect="bold">

?xml

</emphasis>
 is called the 

<emphasis id="em1003" effect="italics">
XML declaration

</emphasis>
. It tells what version of XML is 
being used and also specifies the encoding scheme for the characters in the 
file. An XML declaration should be included at the beginning of every XML 
document.

</para>





<para id="p1035">
<emphasis id="strong1032" effect="bold">
The root element

</emphasis>
</para>





<para id="p1036">
The line of text that begins with a left angle bracket and 

<emphasis id="strong1033" effect="bold">

mx:Application

</emphasis>
 is the 

<emphasis id="em1004" effect="italics">
start tag

</emphasis>
 for the 

<emphasis id="em1005" effect="italics">
root element

</emphasis>
 in the 
XML document. 

<emphasis id="em1006" effect="italics">
(The root element is always named 

</emphasis>
 

<emphasis id="strong1034" effect="bold">
<emphasis id="em1007" effect="italics">

Application

</emphasis>
</emphasis>
<emphasis id="em1008" effect="italics">
 in a Flex project.)

</emphasis>
 At this point in the 
course, you should be able to identify the end tag for the 

<emphasis id="strong1035" effect="bold">
Application

</emphasis>
 element.

</para>





<para id="p1037">
All XML documents have a root element. All other elements must be nested in 
the root element.

</para>





<para id="p1038">
<emphasis id="strong1036" effect="bold">
Attributes of the root element

</emphasis>
</para>





<para id="p1039">
The start tag for the root element in Listing 1 includes two attributes:

</para>




<list id="ul1006" list-type="bulleted">

  

<item id="li1023">
xmlns:mx

</item>


  

<item id="li1024">
layout

</item>




</list>





<para id="p1040">
<emphasis id="strong1037" effect="bold">
The layout attribute

</emphasis>
</para>





<para id="p1041">
The layout attribute specifies that components will be positioned on the 
computer screen using absolute coordinates. As you will see later, this is not 
what I want for my project so I will delete this attribute.

</para>





<para id="p1042">
<emphasis id="strong1038" effect="bold">
The namespace (xmlns) attribute

</emphasis>
</para>





<para id="p1043">
The more interesting attribute is the one named 

<emphasis id="strong1039" effect="bold">
xmlns

</emphasis>
. The 
term 

<emphasis id="strong1040" effect="bold">
xmlns

</emphasis>
 is the required name for a namespace attribute. 
While it isn't necessary in general to include a namespace attribute in the root 
element, when a namespace attribute is included in the root element, it becomes 
the 

<emphasis id="em1009" effect="italics">
default namespace

</emphasis>
 for the entire document.

</para>





<para id="p1044">
<emphasis id="strong1041" effect="bold">
Namespace is always required for a Flex project

</emphasis>
</para>





<para id="p1045">
It is always necessary to include the namespace attribute shown in Listing 1 
in the main MXML document for a Flex 3 project. That is why Flex Builder 3 
includes it in the skeleton code for the project.

</para>




<quote id="blockquote1002" display="block">
<emphasis id="em1010" effect="italics">
(Flash Builder 4 includes different namespace attributes in the 
skeleton code for a Flex 4 project.)

</emphasis>
</quote>





<para id="p1046">
To make a long story short, the inclusion of the default namespace attribute 
shown in Listing 1 means that all elements with names that refer to components 
from the standard Flex 3 library of components must be prefixed with


<emphasis id="strong1042" effect="bold">
mx

</emphasis>
.

</para>





<para id="p1047">
<emphasis id="strong1043" effect="bold">
A viable Flex project

</emphasis>
</para>





<para id="p1048">
The code shown in Listing 1 is a viable Flex 3 project. You can compile it and 
run it. However, when you do, you won't see any output other than a blank area 
with a default gray background in your browser window. So far, the project 
doesn't contain any Flex components such as labels and buttons.

</para>





<para id="p1049">
<emphasis id="strong1044" effect="bold">
Screen output for upgraded Flex project

</emphasis>
</para>





<para id="p1050">
Now I am going to upgrade the project to add a 

<emphasis id="strong1045" effect="bold">
VBox

</emphasis>

container with a red background to the 

<emphasis id="strong1046" effect="bold">
Application

</emphasis>
 element, and 
then add a 

<emphasis id="strong1047" effect="bold">
Label

</emphasis>
 and a 

<emphasis id="strong1048" effect="bold">
Button

</emphasis>
 to the


<emphasis id="strong1049" effect="bold">
VBox

</emphasis>
 container element. I will also delete the


<emphasis id="strong1050" effect="bold">
layout

</emphasis>
 attribute shown in Listing 1.

</para>





<para id="p1051">
If you compile and run this project, you should see the output shown in 
Figure 3.

</para>




<figure id="figure1002" type="figure">
<label>Figure</label>


<title>
<emphasis id="Figure_3" effect="bold">
</emphasis>
Screen output for upgraded Flex project.
</title>



			

<media id="media1002" alt="Missing image." display="block">
<image id="img1002" mime-type="image/jpeg" src="../../media/flex0086c.jpg" width="272" height="403"/>
</media>




<caption>Screen output for upgraded Flex project.</caption>
</figure>





	

<para id="p1052">
<emphasis id="strong1051" effect="bold">
The modified MXML code

</emphasis>
</para>





<para id="p1053">
The modified MXML code is shown in Listing 2.

</para>




<example id="listing1001" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_2" effect="bold">
</emphasis>
Upgraded Flex project code.
</title>







<code id="pre1001" display="block">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;mx:Application
  xmlns:mx="http://www.adobe.com/2006/mxml"&gt;
  
  &lt;!--Add a VBox container to the Application--&gt;
  &lt;mx:VBox backgroundColor="#FF0000"&gt;
    
    &lt;!--Add a label and a button to the VBox--&gt;
    &lt;mx:Label text="Label"/&gt;
    &lt;mx:Button label="Button"/&gt;
    
  &lt;/mx:VBox&gt;
  
&lt;/mx:Application&gt;</code>




</example>





	

<para id="p1054">
<emphasis id="strong1052" effect="bold">
Comments

</emphasis>
</para>





<para id="p1055">
The lines of text in Listing 2 that begin with the left angle bracket 
followed by !-- are comments. The comment includes everything from the beginning 
to the -- followed by a right angle bracket. 

<emphasis id="em1011" effect="italics">
(You cannot include -- in 
a comment.)

</emphasis>
</para>




<para id="p1056">
You can include comments in an XML document to help explain the code, record 
the date, or for whatever purpose a comment may be appropriate. Comments are 
ignored by the Flex compiler and have no effect on the behavior of the program.

</para>





<para id="p1057">
<emphasis id="strong1053" effect="bold">
The Application element

</emphasis>
</para>





<para id="p1058">
The start and end tags for the 

<emphasis id="strong1054" effect="bold">
Application

</emphasis>
 element are the same as in Listing 1 except that I deleted 
the 

<emphasis id="strong1055" effect="bold">
layout

</emphasis>
 attribute.

</para>





<para id="p1059">
<emphasis id="strong1056" effect="bold">
The VBox element

</emphasis>
</para>





<para id="p1060">
At this point, you should have no difficulty identifying the start and end tags for the 

<emphasis id="strong1057" effect="bold">
VBox

</emphasis>
 element. Note that I included an 
attribute for the 

<emphasis id="strong1058" effect="bold">
VBox

</emphasis>
 element to cause the


<emphasis id="strong1059" effect="bold">
backgroundColor

</emphasis>
 for the 

<emphasis id="strong1060" effect="bold">
VBox

</emphasis>
 to be red. 

<emphasis id="em1012" effect="italics">
(I 
will leave it as an exercise for the student to research and determine how 
"#FF0000" represents the color red.)

</emphasis>
</para>





<para id="p1061">
<emphasis id="strong1061" effect="bold">
The VBox element

</emphasis>
</para>





<para id="p1062">
You should also note that the name of the 

<emphasis id="strong1062" effect="bold">
VBox

</emphasis>
 element is 
prefixed with 

<emphasis id="strong1063" effect="bold">
mx

</emphasis>
, which is the default namespace for all Flex 
3 components.

</para>





<para id="p1063">
Finally, you should note that the 

<emphasis id="strong1064" effect="bold">
VBox

</emphasis>
 element is nested 
inside the Application element. We say that in this case, 

<emphasis id="strong1065" effect="bold">
VBox

</emphasis>

is a child of 

<emphasis id="strong1066" effect="bold">
Application

</emphasis>
.

</para>





<para id="p1064">
<emphasis id="strong1067" effect="bold">
The physical output on the screen

</emphasis>
</para>





<para id="p1065">
Physically, the 

<emphasis id="strong1068" effect="bold">
Application

</emphasis>
 element represents the browser 
window with the gray background shown in Figure 3. The 

<emphasis id="strong1069" effect="bold">
VBox

</emphasis>

component with the red background is inside of or contained within the


<emphasis id="strong1070" effect="bold">
Application

</emphasis>
 container in Figure 3.

</para>





<para id="p1066">
The nesting structure that you give to the MXML code carries through to the 
physical arrangement of the corresponding components in the resulting GUI.

</para>





<para id="p1067">
<emphasis id="strong1071" effect="bold">
The Label and Button elements

</emphasis>
</para>





<para id="p1068">
The two lines of code that begin with a left angle bracket followed by

<emphasis id="strong1072" effect="bold">
 
mx:Label

</emphasis>
 and

<emphasis id="strong1073" effect="bold">
 mx:Button

</emphasis>
 nest a 

<emphasis id="strong1074" effect="bold">
Label

</emphasis>
 
element and a 

<emphasis id="strong1075" effect="bold">
Button

</emphasis>
 element inside the 

<emphasis id="strong1076" effect="bold">
VBox

</emphasis>
 
element. Once again, this carries through to the output GUI shown in Figure 3 
where the label and the button are contained in the red 

<emphasis id="strong1077" effect="bold">
VBox

</emphasis>

component.

</para>





<para id="p1069">
Note that as is the case with all standard Flex 3 components, the names of 
the


<emphasis id="strong1078" effect="bold">
Label

</emphasis>
 and 

<emphasis id="strong1079" effect="bold">
Button

</emphasis>
 elements are prefixed with


<emphasis id="strong1080" effect="bold">
mx

</emphasis>
. 

<emphasis id="em1013" effect="italics">
(A different prefix is used in Flex 4.)

</emphasis>
</para>





<para id="p1070">
<emphasis id="strong1081" effect="bold">
Properties of the Label and Button element

</emphasis>
</para>





<para id="p1071">
The 

<emphasis id="strong1082" effect="bold">
Label

</emphasis>
 element has an attribute that sets the


<emphasis id="strong1083" effect="bold">
text

</emphasis>
 property to the text that you see in the label in Figure 
3. Similarly, the 

<emphasis id="strong1084" effect="bold">
Button

</emphasis>
 element has an attribute that sets the 
button's 

<emphasis id="strong1085" effect="bold">

label

</emphasis>
 property to the text that you see on the face of the button in 
Figure 3.

</para>





<para id="p1072">
<emphasis id="strong1086" effect="bold">
Grouping components in containers

</emphasis>
</para>





<para id="p1073">
The Flex 

<emphasis id="strong1087" effect="bold">
VBox

</emphasis>
 component is a 

<emphasis id="em1014" effect="italics">
container

</emphasis>
. Its purpose 
is to serve as a container for other components. Flex 3 provides several other 

<emphasis id="em1015" effect="italics">

container

</emphasis>
 components in addition to the 

<emphasis id="strong1088" effect="bold">
VBox

</emphasis>

component. They are used to group components in the GUI in a way that helps the 
user navigate the GUI.

</para>





<para id="p1074">
<emphasis id="strong1089" effect="bold">
The Label and Button elements are empty

</emphasis>
</para>





<para id="p1075">
The 

<emphasis id="strong1090" effect="bold">
Label

</emphasis>
 and 

<emphasis id="strong1091" effect="bold">
Button

</emphasis>
 components are not 
containers. Therefore, they cannot contain other components in the GUI. 

</para>





<para id="p1076">
As a result, the 

<emphasis id="strong1092" effect="bold">
Label

</emphasis>
 and 

<emphasis id="strong1093" effect="bold">
Button

</emphasis>
 elements 
in Listing 2 are 

<emphasis id="em1016" effect="italics">
empty

</emphasis>
. They don't contain any other elements. However, 
even empty elements can and often do have attributes.

</para>





<para id="p1077">
<emphasis id="strong1094" effect="bold">
No end tags for Label and Button elements

</emphasis>
</para>





<para id="p1078">
Because the 

<emphasis id="strong1095" effect="bold">
Label

</emphasis>
 and 

<emphasis id="strong1096" effect="bold">
Button

</emphasis>
 elements are 
empty elements, they don't have end tags. Instead they have a slash character 
immediately to the left of the closing angle bracket on the start tag.

</para>





<para id="p1079">
<emphasis id="strong1097" effect="bold">
The final upgrade

</emphasis>
</para>





<para id="p1080">
Now I'm going to upgrade the project once again to produce the output GUI 
shown in Figure 2. In this upgrade, I will add a custom label and a custom 
button that create name conflicts. I will resolve the name conflict using 
namespaces.

</para>





<para id="p1081">
<emphasis id="strong1098" effect="bold">
Two custom components

</emphasis>
</para>





<para id="p1082">
The custom components are defined in the files named


<emphasis id="strong1099" effect="bold">
Label.mxml

</emphasis>
 and 

<emphasis id="strong1100" effect="bold">
Button.mxml

</emphasis>
 shown in Figure 1. 
I will begin by discussing the MXML code for each of these custom components.

</para>





<para id="p1083">
Listing 3 shows the MXML code for the custom label.

</para>




<example id="listing1002" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_3" effect="bold">
</emphasis>
Contents of the file named Label.mxml.
</title>







<code id="pre1002" display="block">&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"&gt;

  &lt;mx:Label 
    text="Custom Label" 
    color="#FFFF00" 
    fontSize="12" 
    fontWeight="bold"/&gt;
        
&lt;/mx:VBox&gt;</code>




</example>





	

<para id="p1084">
<emphasis id="strong1101" effect="bold">
Won't discuss in detail

</emphasis>
</para>





<para id="p1085">
Since this lesson is mainly about using namespaces to resolve name conflicts, 
and is not about creating custom components, I'm not going to go into detail at 
this time about how to create custom components. Briefly, Listing 3 creates a 
custom component consisting of a label with yellow bold text and a font size of 
12 points inside of a 

<emphasis id="strong1102" effect="bold">
VBox

</emphasis>
 container. 

</para>





<para id="p1086">
This custom component is shown as the label with the yellow text in the 
middle of Figure 2. 

<emphasis id="em1017" effect="italics">
(I will cover the details of designing and creating 
custom components in a future lesson.)

</emphasis>
</para>





<para id="p1087">
<emphasis id="strong1103" effect="bold">
Contents of the file named Button.mxml

</emphasis>
</para>





<para id="p1088">
Listing 4 shows the MXML code for the custom button.

</para>




<example id="listing1003" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_4" effect="bold">
</emphasis>
Contents of the file named Button.mxml.
</title>







<code id="pre1003" display="block">&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
  backgroundColor="#00FFFF"&gt;

  &lt;mx:Label
    text="Custom Component." 
    color="#000000" 
    fontSize="12" fontWeight="bold"/&gt;
  
  &lt;mx:Button
    label="Button"/&gt;

&lt;/mx:VBox&gt;</code>




</example>





	

<para id="p1089">
This custom component can 
also be viewed in Figure 2. Briefly it consists of a button and a label with 
black text in a small 

<emphasis id="strong1104" effect="bold">
VBox

</emphasis>
 container with a cyan background.

</para>





<para id="p1090">
<emphasis id="strong1105" effect="bold">
Contents of the file named 
NameSpace01.mxml

</emphasis>
</para>





<para id="p1091">
Listing 5 shows the contents of the file named 

<emphasis id="strong1106" effect="bold">
NameSpace01

</emphasis>
, which is the main 
driver for the entire application.

</para>




<example id="listing1004" type="listing">
<label>Listing</label>




<title>
<emphasis id="Listing_5" effect="bold">
</emphasis>
Contents of the file named NameSpace01.mxml.
</title>







<code id="pre1004" display="block">&lt;?xml version="1.0"?&gt;
&lt;!--
Namespace01
Illustrates the use of namespaces to avoid name conflicts.
--&gt;
&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:MyComps="customComps.*"
                backgroundColor="#FFFF00"&gt;

  &lt;!--Add a standard VBox container--&gt;
  &lt;mx:VBox backgroundColor="#FF0000"&gt;
  
    &lt;mx:Label text="Standard Label" 
      color="#FFFF00" 
      fontSize="12" 
      fontWeight="bold"/&gt;
    &lt;mx:Button label="Standard Button" /&gt;
    
    &lt;MyComps:Label id="customLabel"/&gt;
    &lt;MyComps:Button id="customButton"/&gt;
  &lt;/mx:VBox&gt;

&lt;/mx:Application&gt;</code>




</example>







<para id="p1092">
<emphasis id="strong1107" effect="bold">
Resolving name conflicts using namespaces

</emphasis>
</para>





<para id="p1093">
This code adds two standard components named 

<emphasis id="strong1108" effect="bold">
Label

</emphasis>
 and


<emphasis id="strong1109" effect="bold">
Button

</emphasis>
 and two custom components named 

<emphasis id="strong1110" effect="bold">
Label

</emphasis>

and 

<emphasis id="strong1111" effect="bold">
Button

</emphasis>
 to a 

<emphasis id="strong1112" effect="bold">
VBox

</emphasis>
 container.

</para>





<para id="p1094">
Because the custom components have the same names as the standard components, 
a name conflict arises. Listing 5 resolves the name conflict using namespaces.

</para>





<para id="p1095">
<emphasis id="strong1113" effect="bold">
The folder named customComps

</emphasis>
</para>





<para id="p1096">
As you may recall from Figure 1, the two files that represent the custom 
components are in a folder named 

<emphasis id="strong1114" effect="bold">
customComps

</emphasis>
, which is a child 
of the folder named 

<emphasis id="strong1115" effect="bold">
src

</emphasis>
. Thus, the folder named


<emphasis id="strong1116" effect="bold">
customComps

</emphasis>
 is a sibling of the file named


<emphasis id="strong1117" effect="bold">
NameSpace01.mxml

</emphasis>
.

</para>





<para id="p1097">
<emphasis id="strong1118" effect="bold">
A new namespace attribute

</emphasis>
</para>





<para id="p1098">
The code that begins with 

<emphasis id="strong1119" effect="bold">
xmlns:MyComps

</emphasis>
 in Listing 5 is a 
new attribute for the


<emphasis id="strong1120" effect="bold">
Application

</emphasis>
 element. This attribute establishes a new namespace 
with the prefix 

<emphasis id="strong1121" effect="bold">
MyComps

</emphasis>
. The namespace prefix points to all of 
the files in the folder named 

<emphasis id="strong1122" effect="bold">
customComps

</emphasis>
.

</para>





<para id="p1099">
The name 

<emphasis id="strong1123" effect="bold">
customComps

</emphasis>
 identifies the folder and the period 
and asterisk following the name mean that all of the files in the folder are 
part of the new namespace.

</para>





<para id="p1100">
<emphasis id="strong1124" effect="bold">
Must use the new prefix

</emphasis>
</para>





<para id="p1101">
In order to include the custom components defined by these files in the MXML 
document, elements named after these components must be prefixed with


<emphasis id="strong1125" effect="bold">
MyComps

</emphasis>
.

</para>





<para id="p1102">
<emphasis id="strong1126" effect="bold">
Using the mx prefix for standard Flex 
components

</emphasis>
</para>





<para id="p1103">
The code that begins with 

<emphasis id="strong1127" effect="bold">
mx

</emphasis>
 in Listing 5 uses the standard


<emphasis id="strong1128" effect="bold">
mx

</emphasis>
 namespace prefix to add a standard 

<emphasis id="strong1129" effect="bold">
Label

</emphasis>

component and a standard 

<emphasis id="strong1130" effect="bold">
Button

</emphasis>
 component to the


<emphasis id="strong1131" effect="bold">
VBox

</emphasis>
 container with a red background. You should have no 
difficulty identifying the start and end tags for the 

<emphasis id="strong1132" effect="bold">
VBox

</emphasis>
 
element. Attributes 
are applied to the 

<emphasis id="strong1133" effect="bold">
mx:Label

</emphasis>
 element to set the color, size, and 
weight of the text in the label.

</para>





<para id="p1104">
<emphasis id="strong1134" effect="bold">
Using the MyComps prefix for custom components

</emphasis>
</para>





<para id="p1105">
The two lines of code that begin with a left angle bracket and the word


<emphasis id="strong1135" effect="bold">
MyComps

</emphasis>
 use the new 

<emphasis id="strong1136" effect="bold">
MyComps

</emphasis>

namespace prefix to add a custom 

<emphasis id="strong1137" effect="bold">
Label

</emphasis>
 component and a custom


<emphasis id="strong1138" effect="bold">
Button

</emphasis>
 component to the same 

<emphasis id="strong1139" effect="bold">
VBox

</emphasis>

container.

</para>





<para id="p1106">
<emphasis id="strong1140" effect="bold">
Resolving the name conflict

</emphasis>
</para>





<para id="p1107">
Because the elements for standard components are prefixed with


<emphasis id="strong1141" effect="bold">
mx

</emphasis>
 and the elements for custom components are prefixed with


<emphasis id="strong1142" effect="bold">
MyComps

</emphasis>
, the compiler is able to distinguish between them and 
to resolve the name conflicts.

</para>





<para id="p1108">
The final result is the GUI shown in Figure 2.

</para>





</section>
<section id="h11005">
<title>
<emphasis id="Resources" effect="bold">

Resources

</emphasis>


</title>




<para id="p1109">
I will publish a list containing links to Flex resources 
as a separate document. Search for Flex Resources in the 
Connexions search box.

</para>




</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>





<para id="p1110">
This section contains a variety of miscellaneous materials.

</para>







<note id="note1001" type="miscellaneous">







<emphasis id="strong1143" effect="bold">
Housekeeping material

</emphasis>



<list id="ul1007" list-type="bulleted">



<item id="li1025">
Module name: XML - Namespaces - Flex 3

</item>




<item id="li1026">
Files:

<list id="ul1008" list-type="bulleted">



<item id="li1027">
Flex0086\Flex0086.htm

</item>




<item id="li1028">
Flex0086\Connexions\FlexXhtml0086.htm

</item>




</list>




</item>




</list>




</note>









<note id="note1002" type="miscellaneous">




<emphasis id="strong1144" effect="bold">
PDF disclaimer:

</emphasis>
 Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.


</note>









<para id="p1111">
-end-

</para>





<para id="p1112">
</para>




</section>
</content>




</document>